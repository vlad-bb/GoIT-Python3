'''Спецификация гораздо более сложный модификатор. С её помощью можно:
менять разрядность представления целых чисел (десятичные, восьмеричные, шестнадцатеричные и др.);
print('dec: {:d} hex: {:x} bin: {:b}'.format(15, 15, 15))  # dec: 15 hex: f bin: 1111
менять точность представления дробных чисел (округлять до указанного количества знаков);
print('pi: {:0.3}'.format(3.1415))  # pi: 3.14
как отображать знак чисел:
print('"{}" "{:+}" "{:-}" "{: }"'.format(1, 2, -3, 4))  # "1" "+2" "-3" " 4"
как выровнять положение элемента и чем (какими символами) дополнить;
print("|{:<10}|{:*^10}|{:>10}|".format('left', 'center', 'right'))  # |left      |**center**|     right|
Знание об этом инструменте не является критически важным, но использование форматирования строк в домашней работе для конструирования более "красивого" результата выполнения скрипта будет плюсом.

Задание
Поработаем немного со спецификацией в форматировании строк. Напишите функцию formatted_numbers, которая возвращает список отформатированных строк, чтобы при выводе следующего кода:

for el in formatted_numbers():
    print(el)
Получалась следующая таблица:

| decimal  |   hex    |  binary  |
|0         |    0     |         0|
|1         |    1     |         1|
|2         |    2     |        10|
|3         |    3     |        11|
|4         |    4     |       100|
|5         |    5     |       101|
|6         |    6     |       110|
|7         |    7     |       111|
|8         |    8     |      1000|
|9         |    9     |      1001|
|10        |    a     |      1010|
|11        |    b     |      1011|
|12        |    c     |      1100|
|13        |    d     |      1101|
|14        |    e     |      1110|
|15        |    f     |      1111|
все столбцы имеют ширину в 10 символов
у заголовков таблицы выравнивание по центру
первый столбец десятичных чисел — выравнивание по левому краю
второй столбец шестнадцатеричных чисел — выравнивание по центру
третий столбец двоичных чисел — выравнивание по правому краю
вертикальный символ | не входит в ширину столбца
Как вы уже поняли, функция formatted_numbers выводит таблицу 
чисел от 0 до 15 в десятичном, шестнадцатеричном и двоичном формате.'''


def formatted_numbers():
    list = []
    list.append("|{:^10}|{:^10}|{:^10}|".format('decimal', 'hex', 'binary'))
    for i in range(16):
        list.append("|{:<10}|{:^10}|{:>10}|".format(
            i, str(hex(i)[2:]), str(bin(i)[2:])))
    return list