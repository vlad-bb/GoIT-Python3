'''Подсписком (sublist) называют список, являющийся составной частью большего списка.
Подсписок может содержать один элемент, множество элементов, а также быть пустым.

Например, [1], [2], [3] и [4] являются подсписками списка [1, 2, 3, 4]. Список [2, 3] также входит в состав [1, 2, 3, 4],
 но при этом список [2, 4] не является подсписком [1, 2, 3, 4], поскольку в исходном списке числа 2 и 4 не соседствуют.

Пустой список является подсписком для любого списка.

Напишите функцию all_sub_lists, возвращающую список, содержащий все возможные подсписки заданного.

Например, если функции передан аргумент список [1, 2, 3],
то функция должна вернуть следующий список: [[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]].

Функция all_sub_lists должна возвращать как минимум один список с пустым подсписком [[]].'''

# def all_sub_lists(data):
#     result = [[]]
#     for i in range(len(data) + 1):
#         for j in range(i+1, len(data) + 1):
#             result+=(data[i:j])
#     return result

# def all_sub_lists(data):
#     n=len(data)
#     sublist=[[]]
#     sublist+=[data[i:j] for i in range(n+1) for j in range(i+1,n+1)]
#     return sublist
def all_sub_lists(data):
    y = [[]]
    v = []
    counter = 0
    x = data
    for i in range(0, len(x)):
     v = []
     for j in x:
        v.append(j)
        if i+1 == len(v):
            y.append(v)
            c = v[1:]
            v = c
    return y

print(all_sub_lists([1, 2, 3]))
print(all_sub_lists([4, 6, 1, 3]))
